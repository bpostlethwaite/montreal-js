Javascript Montreal Presentation

Hi there, my name is Ben and I am an engineer with Plotly. I am here to talk to you about nodejs streams and how they helped make our new Streaming API and infrastructure behind it, so much fun to build. My goal today is to convince at least a few of you who have not yet used streams in your projects, be that on the server or the client, to give it a shot. Also with me from Plotly are Chris Parmer and Alex Vados, they will be helping out with the demonstrations we have planned, and we do have some really cool demos for you to watch and also for you to participate in. We have some hardware hooked up to our streaming API that we will pass around and there should be time at the end to help anyone who wants to get visualizing some realtime data streams.

At the back creeping around with the camera is Matte Vonnee, that's right, you are all going to be filmed, but don't worry, Matt is an excellent videographer, he'll make you all look fantastic. Once the video is edited and ready to go we'll make sure a copy gets put on the js-montreal website so everyone will have access.

As many of you are probably aware this is a special week for programmers in Montreal, as we are lucky to be hosting PyCon 2014. Just out of curiosity who is going to Pycon this year? Plotly will have a booth, so for those of you who will be there, please stop by our booth and say hello. Also, our CEO and one of the founders, Jack Parmer, is here, say hi. If anyone has questions about Plotly or want to talk about the tech startup scene in Montreal Jack is both an engineer and chief strategist, so definitely take the opportunity to stay behind and chat.

A little bit about our company Plotly. At Plotly we care deeply about data and making it easy and fun to transform your data into information through professional quality visualization, analysis and collaboration. We have a REST API and support for many different platforms and languages as well as an webapp which lets people upload and explore, share their data online.

Who knows what this is? Right, histogram, bar chart. This is a common way to display a wide range of data types. But have you ever wanted the bar graph to be plugged into the underlying data, when the data changes it changes? Have you ever wanted it to not a historic snapshot that is old by the time you finish making, but something alive. <show it>

So how about this thing, what would we call this kind of data? It's timeseries data, timeseries data is used everywhere, engineering, financial and of course sensors and hardware, among many others. But timeseries data is just another way of saying historic real-time data? And at one point this data was alive. <show realtime timeseries> What if it was super easy to pipe a big file of financial data and animate it in realtime online or more importantly, plug into, and visualize a real-time data source? Well that would be cool.

I have shown you two examples of realtime data, the histogram and the timeseries. In the case of the histogram we had what I think of as a relation between spatial dimensions. It's a relation between whatever parameter you have on the xaxis and the yaxis. When we add motion to this type of visualization we are watching how that relation evolves in time, so we can actually see how this point moves through parameter space, like a point moving on a map. Whereas the timeseries data has time on the x-axis and all the representations of data points are actually the same spatial point, just drawn for different instances in time, like a film reel. You can perform both of these types of realtime data visualizations with Plotlys streaming API. It's actually a really nice extension of how the underlying data is rendered. For the first type, the bubble chart or bar chart, you stream json objects containing data arrays that explain the position of all the points at every time step, like an animation. For timeseries data you just stream scalar values, and we setup a queue and render it in realtime as data is added to the back and data is removed from the front.

---------
Streaming is basically an extension of our REST API. You are still required to first make a regular plot call to setup the base plot, it's style and layout. Once that is configured and your receive a response you can start streaming to our streaming endpoint, and that will populate the basegraph with data in realtime.

This dual service approach nicely keeps the services independent, allowing more flexibility for the user, but its really just a reflection of the underlying technology. You see, Plotly is built on a Django Backend, which is excellent, it handles REST amazingly well and can be a reasonably secure system. But I needed realtime streaming and lets face it, Python is many things but async-realtime it is not. Anyway, there is this crazy thing out there, Node, an asyncronous swiss-army networking machine gun. Node doesn't just fit this usecase, it is it's Raison d'Ãªtre, it's what node gets up at 5am every morning and trains for. So we have a new Streaming API at Plotly and the streaming backend is 100% javascript. And as an aside, nodejs made it a lot of fun to build.
---------

The plan for the next few minutes is talk a little about nodejs streams and why they are awesome. Then we can talk about how Plotly is using streams in production and open up the floor for questions.

Before we begin that we have a cool streaming demonstration. --- if the wifi Gods are willing. Chris, Alex you guys ready? Cool, everybody who has a laptop or mobile that supports websockets check out this URL.
 < start demo >
So what we are passing around are Arduino's hooked up over USB to a Raspberry Pi. Each Arduino has two sensors.  A Potentiometer and a light sensor. The RasPi's are running some node code that takes the sensor readings and streams them over a continuous http connection to Plotly's servers. We have two data-streams flowing right now, one from each Arduino Pi pairing, and they are streaming into the same plot. I think the knob controls frequency while the light sensor controls amplitude.

<give audience some time to play with the Pis>

Since this is all real-timey we can do cool things like load the stream into the Plotly Webapp, and then restyle it. So lets make this sine-wave A little more transparent. ... lets make it an area plot, but the difference. I save, that change should propagate out to all the connected clients, even if this plot is embedded in a webpage or an ipython notebook. Did that work? Nice. <end demo>

Okay great, so I hope that gave you an idea of where we are taking this service. We are really enthusiastic about the potential of this service. My goal for this API is to make streaming data visualzation simple. for the next few minutes we are going to take tour into the world of streams, and specifically nodejs streams. How many of you have used Nodejs? How many of you have used Nodejs streams?

<start slide a1>
